{"version":3,"sources":["webpack:///./node_modules/@ecomplus/storefront-components/src/js/helpers/scroll-to-element.js","webpack:///./node_modules/@ecomplus/storefront-router/src/index.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/list.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/map.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/resolve.js","webpack:///./node_modules/@ecomplus/storefront-router/src/methods/setup-store.js"],"names":["$el","top","offsetParent","offsetTop","window","scroll","behavior","storeId","location","self","$ecomConfig","get","map","arguments","resolve","list","setupStore","Promise","reject","promises","routes","forEach","resource","push","store","url","then","response","result","data","Array","isArray","_id","slug","name","sku","path","find","route","all","catch","pathname","slice","replace","storefront","val","GET","resourceId","split","err","Error","body","domain","updateConfig","hostname","platform","prop","_config","set","lang","default_lang","toUpperCase","store_id"],"mappings":"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","file":"chunk.29c364d2115877c930dc.js","sourcesContent":["export default ($el, top = 0) => {\n  while ($el.offsetParent) {\n    top += $el.offsetTop\n    $el = $el.offsetParent\n  }\n  return window.scroll({\n    top,\n    behavior: 'smooth'\n  })\n}\n","/**\n * Universal JS router for E-Com Plus storefront.\n * {@link https://github.com/ecomclub/storefront-router GitHub}\n *\n * @module @ecomplus/storefront-router\n * @author E-Com Club <ti@e-com.club>\n * @return {@link EcomRouter}\n * @see EcomRouter\n *\n * @example\n * // ES import default\n * import EcomRouter from '@ecomplus/storefront-router'\n *\n * @example\n * // With CommonJS\n * const EcomRouter = require('@ecomplus/storefront-router')\n *\n * @example\n * <!-- Global `EcomRouter` from CDN on browser -->\n * <script src=\"https://cdn.jsdelivr.net/npm/@ecomplus/storefront-router/dist/ecom-router.var.min.js\"></script>\n *\n * @example\n * <!-- Bundle from CDN with `ecomUtils` and `ecomClient` -->\n * <script\n *   src=\"https://cdn.jsdelivr.net/npm/@ecomplus/storefront-router/dist/ecom-router.bundle.min.js\"\n * ></script>\n */\n\nimport { $ecomConfig } from '@ecomplus/utils'\nimport map from './methods/map'\nimport resolve from './methods/resolve'\nimport list from './methods/list'\nimport setupStore from './methods/setup-store'\n\nexport default function (storeId, location = typeof window === 'object' && window.location) {\n  const self = this\n\n  /**\n   * Respective Store ID number\n   * @name EcomRouter#storeId\n   * @type {number}\n   */\n  this.storeId = storeId || $ecomConfig.get('store_id')\n\n  /**\n   * [Location interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Location}\n   * @name EcomRouter#location\n   * @type {object}\n   */\n  this.location = location\n\n  this.map = function () {\n    return map(self, arguments)\n  }\n\n  this.resolve = function () {\n    return resolve(self, arguments)\n  }\n\n  this.list = function () {\n    return list(self, arguments)\n  }\n\n  this.setupStore = function () {\n    return setupStore(self, arguments)\n  }\n}\n\n/**\n * Construct a new storefront router object.\n * @class EcomRouter\n * @param {number} [storeId=_config.get('store_id')] - Preset Store ID number\n * @param {object} [location=window.location] -\n * [Location interface]{@link https://developer.mozilla.org/en-US/docs/Web/API/Location}\n *\n * @example\n\nconst router = new EcomRouter()\n\n *\n * @example\n\n// Defining Store ID and using custom location interface\nconst storeId = 2000\nconst router = new EcomRouter(storeId, DOM.location)\n// P.S.: You may want to use custom location when using jsdom on Node.js for example\n\n */\n","import { store } from '@ecomplus/client'\n\nexport default self => new Promise((resolve, reject) => {\n  const { storeId } = self\n  // list slugs for each resource\n  const promises = []\n  const routes = []\n\n  ;[\n    'products',\n    'categories',\n    'collections',\n    'brands'\n  ].forEach(resource => {\n    promises.push(\n      store({ url: `/${resource}.json`, storeId }).then(response => {\n        const { result } = response.data\n        if (Array.isArray(result)) {\n          result.forEach(({ _id, slug, name, sku }) => {\n            if (slug) {\n              // check it this path is not already in use\n              const path = '/' + slug\n              if (!routes.find(route => route.path === path)) {\n                // add new route object\n                routes.push({ resource, _id, path, name, sku })\n              }\n            }\n          })\n        }\n      })\n    )\n  })\n\n  // resolve when all promises are done\n  Promise.all(promises)\n    .then(() => resolve(routes))\n    .catch(reject)\n})\n\n/**\n * @method\n * @name EcomRouter#list\n * @description List all storefront routes for product, categories, brands and collections.\n *\n * @returns {Promise<route[]|error>}\n *\n * @example\n\n// Listing all routes, then resolving to get each document body\nrouter.list()\n  .then(routes => {\n    routes.forEach(route => {\n      console.log(route.path)\n      console.log(route.resource)\n      console.log(route._id)\n      if (route.name) {\n        console.log('Not a product', route.name)\n      }\n      router.resolve(route)\n        .then(context => {\n          console.log(context.body)\n        })\n        .catch(error => { throw error })\n    })\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n","import { storefront } from '@ecomplus/client'\n\nconst map = (self, [path]) => {\n  if (!path) {\n    // get pathname from current location interface\n    path = self.location.pathname\n  }\n  // map page resource and object based on slug\n  const slug = typeof path === 'string' ? path.slice(1) : null\n  // replace / with $ on slug to escape URL\n  const url = '/' + self.storeId + '@' + slug.replace(/\\//g, '$') + '.json'\n\n  // send request to E-Com Plus Storefront API\n  return storefront({ url }).then(response => {\n    // { \"GET\": \"[resource]@[id]\" }\n    const val = response.data.GET\n    if (val) {\n      const [resource, resourceId] = val.split('@')\n      if (resourceId) {\n        // returns object with resource info on promise chain\n        return {\n          path,\n          resource,\n          _id: resourceId\n        }\n      }\n    }\n\n    // throw error to handle promise catch\n    const err = new Error('Resource not found, invalid slug or store ID')\n    // simulate axios error object\n    err.response = response\n    throw err\n  })\n}\n\n/**\n * @typedef {object} route\n * @property {string} path - Route URL pathname\n * @property {string} resource - Route resource type from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {string} _id - Route document Object ID from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {string} [name] - Route document name (not set on products)\n */\n\n/**\n * @method\n * @name EcomRouter#map\n * @description Get page resource and object ID based on URL pathname.\n *\n * @param {string} [path=location.pathname] - URL pathname\n * @returns {Promise<route|error>}\n *\n * @example\n\n// Mapping resource and object ID from current location pathname\nrouter.map()\n  .then(route => {\n    console.log(route.path)\n    console.log(route.resource)\n    console.log(route._id)\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n * @example\n\n// Specifying some URL pathname\nrouter.map('/monitores')\n  .then(route => console.log(route))\n  .catch(error => console.error(error))\n\n */\n\nexport default map\n","import { store } from '@ecomplus/client'\n\nconst resolve = (self, [route]) => new Promise((resolve, reject) => {\n  // handle new route\n  const { storeId } = self\n  const { resource, _id } = route\n\n  if (resource && _id) {\n    // get current page object from Store API\n    store({ url: `/${resource}/${_id}.json`, storeId })\n      .then(({ data }) => {\n        // save object body on context\n        resolve({ resource, body: data })\n      })\n      .catch(reject)\n  } else {\n    // skip request and just reject with new error\n    const err = new Error('Invalid route resource or object ID')\n    err.response = {}\n    reject(err)\n  }\n})\n\n/**\n * @typedef {object} context\n * @property {string} resource - Context resource type from\n * [E-Com Plus Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * @property {object} body - Context\n * [Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * document body for respective route\n */\n\n/**\n * @method\n * @name EcomRouter#resolve\n * @description Get [Store API]{@link https://developers.e-com.plus/docs/api/#/store/}\n * document body based on route resource and Object ID.\n * <br><br>\n * <b>Tip</b>: Although resolve can be used standalone,\n * you may want to use [map]{@link EcomRouter#map} method first.\n *\n * @param {route} route - Route object to get respective document body\n * @returns {Promise<context|error>}\n *\n * @example\n\n// Get document body for current URL pathname\nrouter.map()\n  .then(route => {\n    router.resolve(route)\n      .then(context => {\n        console.log(context)\n        console.log(context.resource)\n        console.log(context.body)\n        console.log(context.body._id)\n        console.log(context.body.name)\n      })\n      .catch(error => { throw error })\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n */\n\nexport default resolve\n","import { _config } from '@ecomplus/utils'\nimport { platform } from '@ecomplus/client'\n\nconst setupStore = (self, [domain, updateConfig = true]) => {\n  if (!domain) {\n    // get domain from current location interface\n    domain = self.location.hostname\n  }\n  const url = '/domains/' + domain + '.json'\n\n  // send request to E-Com Plus Platform API\n  return platform({ url }).then(({ data }) => {\n    if (updateConfig) {\n      // set Store IDs on config\n      ;['store_id', 'store_object_id', 'channel_id'].forEach(prop => _config.set(prop, data[prop]))\n\n      // check for default sales channel language\n      const lang = data.default_lang\n      if (lang) {\n        // set default lang and country codes\n        _config.set('lang', lang)\n        _config.set('country_code', lang.replace(/^[a-z]{2}_/, '').toUpperCase())\n        if (lang === 'pt_br') {\n          // also change default currency\n          _config.set('currency', 'BRL')\n          _config.set('currency_symbol', 'R$')\n        }\n      }\n    }\n\n    // update instance Store ID\n    self.storeId = data.store_id\n    // returns channel info object on promise chain\n    return data\n  })\n}\n\n/**\n * @typedef {object} channel\n * @property {number} store_id - Sales channel Store ID\n * @property {string} store_object_id - Sales channel Store Object ID\n * @property {number} channel_id - Sales channel ID number\n * @property {string} [default_lang] - Sales channel default language code\n */\n\n/**\n * @method\n * @name EcomRouter#setupStore\n * @description Get Store IDs and default lang (and set on `_config`) based on domain name.\n *\n * @param {string} [domain=location.hostname] - Sales channel domain name\n * @param {boolean} [updateConfig=true] - Update global configs from `ecomUtils._config`\n * @returns {Promise<channel|error>}\n *\n * @example\n\n// Using current location URL\nrouter.setupStore()\n  .then(channel => {\n    console.log(channel.store_id)\n    console.log(channel.store_object_id)\n    console.log(channel)\n  })\n  .catch(error => {\n    console.error(error)\n    if (error.response) {\n      console.log(error.response)\n    }\n  })\n\n * @example\n\n// Specifying domain name and disabling `ecomUtils._config` update\nrouter.setupStore('shop-plus.e-com.plus', false)\n  .then(channel => console.log(channel))\n  .catch(error => console.error(error))\n\n */\n\nexport default setupStore\n"],"sourceRoot":""}